# -*- coding: utf-8 -*-
"""ex7kriti.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rMjqLmH3b2LXIQHcNs97ZXXwzD3jYFqf
"""

!wget https://www.dropbox.com/s/aamg1apjhclecka/regression_generated.csv -P ./data/

############# QUES 2 #############
import numpy as np

import matplotlib.pyplot as plt

def gaussian(mean,sta_dev) : 

    return np.random.normal(mean,sta_dev,200)

x1 = gaussian(1,0.5)

y1 = gaussian(1,0.5)

plt.scatter(x1,y1)

x2 = gaussian(0,0.4)

y2 = gaussian(0,0.4)

plt.scatter(x2,y2)

plt.show()

!wget https://www.dropbox.com/s/3uqleyc3wyz52tr/residuals_261.pkl -P ./data/

############### QUES 3 ############################3
import pandas as pd   
import numpy as np
from scipy import stats
import matplotlib.pyplot as plt
import seaborn as sns

data=np.load("./data/residuals_261.pkl",allow_pickle=True).item()
data=pd.DataFrame(data)


print(data)
print(data.info())

############### QUES 4 #######################
import numpy as np

from scipy import integrate

from scipy.stats import norm

import matplotlib.pyplot as plt

#normally distributed numpy array, x, of len(N) (with N=O(100))

mu, sigma = 10, 2

N=100

x = np.random.normal(mu, sigma, N)

#Fill an histogram

fig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(16, 8))

Nbins=10

bins=np.arange(x.min(), x.max(), (x.max()-x.min())/Nbins)

freq, bins, patches = ax1.hist(x=x, bins=bins,alpha=1, histtype='bar', rwidth=0.8)

ax1.grid()

ax1.set_xlabel('x')

ax1.set_ylabel('frequencies')

#error part of the question

bincenters = (bins[1:] + bins[:-1])/2

ax1.errorbar(x=bincenters, y=freq, yerr=np.sqrt(freq), fmt='x', c='b', marker='*', markersize=4, capsize=5)

#create a gaussian with the mean corresponding to the element 

std_def = 1.06 * x.std() * (x.size ** -0.2)

xrange = np.arange(x.min()-sigma, x.max()+sigma)

gaussians = []

for i, dat in enumerate(x):

    gaussians.append( norm(loc=dat, scale=std_def).pdf(xrange) )

    ax2.plot(xrange, gaussians[i], alpha=0.5)

ax2.set_xlabel('x')

ax2.set_ylabel('f(x)')

ax2.grid()

#Sum (with np.sum()) all the gaussian functions and normalize the result such that the integral matches the integral 

#of the original histogram.

area=integrate.trapz(freq, dx=bins[1]-bins[0])

kde=np.array(gaussians).sum(axis=0)

ax1.plot(xrange,kde/sum(kde)*area)

plt.show()