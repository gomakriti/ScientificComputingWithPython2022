# -*- coding: utf-8 -*-
"""HOMEWORK 1 scwp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v1J16i3KqsxjxnnymfmK7Qm-pvjgwQDm
"""

import math

####### TASK 1.1 #######

helloworld = []
for i in range (1,101):
    if i%3==0 and i%5==0: #multiples of both 3 and 5
      helloworld.append("HelloWorld")
    elif i%3==0:    # modulo 3 = multiples of 3
      helloworld.append("Hello")
    elif i%5==0:    # modulo 5 = multiples of 5
      helloworld.append("World")
    else:
      helloworld.append(i)
print(helloworld)

############# TASK 1.2 ###############

pythonlist = [] #blank list
for a in helloworld:  #using helloworld from the last progg.
   if a == "Hello":
     pythonlist.append("Python") #modif with the requirements ATQ
   elif a == "World":
     pythonlist.append("Works")
   elif a == "HelloWorld":
     pythonlist.append("PythonWorks")
   else:
     pythonlist.append(a)
pythonworks = tuple(pythonlist) #creating a tuple of the blank list
print(pythonworks)



###### TASK 2 #########
def swap(x,y): #creating a function for swapping variables
  x,y=y,x
  return x,y
x= input("Insert x: ") #taking input from the user for x
y= input("Insert y: ") #taking input from the user for y
x,y = swap(x,y)
print(x,y)

############ TASK 3 #################
#creating a function for computing the distance
import math as m
def dis_func(u,v):
    return m.sqrt((u[0]-v[0])**2+(u[1]-v[1])**2)
u = (3,0)
v = (0,4)

print(dis_func(u,v))

########## task 4 #########################
# counting letters

s1 = "Write a program that prints the numbers from 1 to 100. \
But for multiples of three print Hello instead of the number and for the multiples of five print World. \
For numbers which are multiples of both three and five print HelloWorld."
s2 = "The quick brown fox jumps over the lazy dog"

ch = {}

for i in s1:
         if i in ch:
             ch[i] +=1
         else:
             ch[i] = 1

print ("Count is" + str(ch))

for i in s2:
         if i in ch:
             ch[i] +=1
         else:
             ch[i] = 1

print ("Count is" + str(ch))

############### task 5 ############

########## isolating the unique ###########

l = [36, 45, 58, 3, 74, 96, 64, 45, 31, 10, 24, 19, 33, 86, 99, 18, 63, 70, 85,
 85, 63, 47, 56, 42, 70, 84, 88, 55, 20, 54, 8, 56, 51, 79, 81, 57, 37, 91,
 1, 84, 84, 36, 66, 9, 89, 50, 42, 91, 50, 95, 90, 98, 39, 16, 82, 31, 92, 41,
 45, 30, 66, 70, 34, 85, 94, 5, 3, 36, 72, 91, 84, 34, 87, 75, 53, 51, 20, 89, 51, 20]


uniq_n = []
count = 0

for i in range(len(l)):
     flag = 0
     for j in range(len(l)):
        if l[i] == l[j] and i !=j:
           flag = 1
           break
     if not flag:
         uniq_n.append(l[i])
         count = count + 1

print("Number of unique numbers: ", str(count))
print("The unique numbers are as follows: ", uniq_n)


### FOR PART B #####
### I Don't really know Data Structures, so I will try again when I finish studying that ######

############# TASK 6 ############### 
######## casting #########
x = input("Value of x: ")
y = input("Value of y: ")

try:
    z = int(x) - int(y)
    print(z)
except:
    try:
        z = float(x) - float(y)
        print(z)

    except:
        try:
            z = str(x) - str(y)
            print(z)

        except:        
            print("You can not add string and integer or string and float")

############# TASK 7 ###############
cubes = []

for i in range (0, 11):
    cubes.append(pow(i, 3))
print(cubes)

################## TASK 8 ##########
a = []
for i in range(3):
    for j in range(4):
        a.append((i, j))
print(a)

listtt = [(i, j) for i in range(3) for j in range(4)]
print(listtt)

################## TASK 9 ###################
hellolist = []
for c in range(1, 100):
    for a in range(1, c):
        for b in range(1, c):
            if pow(a, 2) + pow(b, 2) == pow(c, 2):
                hellolist.append((a, b, c))

print(hellolist)

###################### Task 10 ###########
import math
def normalize(vector):
    sqrsum = sum([i*i for i in vector])
    return tuple([i/math.sqrt(sqrsum) for i in vector])

print(normalize((3,5,7)))

####################### TASK 11 #############
i=0
j=1
count = 0
while count <= 20:
    print(i)
    k = i + j
    i = j
    j = k
    count += 1

"""------------ FINISHED HW 1 ------------"""