# -*- coding: utf-8 -*-
"""Homework 3 scwp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XzSQdefhOFG1AG3A3qUv2x09ErMszQwd
"""

############ TASK 1 #########

hexType = "hex"
binType = "bin"
decType = "dec"


def convert_numbers(number, typeToConvert):
    numberType = decType
    if type(number) == str:
        if number[1] == "b":
            numberType = binType
        elif number[1] == "x":
            numberType = hexType
        else:
            return "The input number is not int/bin/hex !!!"

    if typeToConvert == binType:
        if numberType == decType:
            return bin(number)
        elif numberType == hexType:
            return bin(int(number, 16))
        return number
    elif typeToConvert == hexType:
        if numberType == decType:
            return hex(number)
        elif numberType == binType:
            return hex(int(number, 2))
        return number
    else:
        if numberType == hexType:
            return int(number, 16)
        elif numberType == binType:
            return int(number, 2)
        return number


testNumber = 255
print("Dec to Hex of %d is: " % testNumber, convert_numbers(testNumber, hexType))
print("Dec to Bin of %d is: " % testNumber, convert_numbers(testNumber, binType))
print("Hex to Bin of %s is: " % hex(testNumber), convert_numbers(hex(testNumber), binType))
print("Hex to Dec of %s is: " % hex(testNumber), convert_numbers(hex(testNumber), decType))
print("Bin to Dec of %s is: " % bin(testNumber), convert_numbers(bin(testNumber), decType))
print("Bin to Hex of %s is: " % bin(testNumber), convert_numbers(bin(testNumber), hexType))
print("Also testing Dec to Dec of %s: " % testNumber, convert_numbers(testNumber, decType))
print("Also testing Hex to Hex of %s: " % hex(testNumber), convert_numbers(hex(testNumber), hexType))
print("Also testing Bin to Bin of %s: " % bin(testNumber), convert_numbers(bin(testNumber), binType))

############### TASK  2 ############

def convert_binary(binaryString):
    print("The entered binary is: ", binaryString)
    decNumber = int(binaryString, 2)
    binaryLen = len(binaryString)

    signMask = 2 ** (binaryLen - 1)
    signShiftIndex = binaryLen - 1
    sign = (decNumber & signMask) >> signShiftIndex
    sign = 1 if sign == 0 else -1
    print("Sign of the input is: ", sign)

    exponentShiftIndex = binaryLen - 9
    exponentMask = (2 ** 8 - 1) << exponentShiftIndex
    exponent = (decNumber & exponentMask) >> exponentShiftIndex
    print("exponent is: %d, in binary: %s" % (exponent, bin(exponent)))

    mantissaBitsCount = binaryLen - 9
    mantissaMask = (2 ** mantissaBitsCount - 1)
    mantissaBin = decNumber & mantissaMask
    list_of_m = [(mantissaBin & (2 ** (mantissaBitsCount - i))) >> (mantissaBitsCount - i)
                 for i in range(1, mantissaBitsCount + 1)]
    fractionalOfMantissa = 0
    for i in range(mantissaBitsCount):
        fractionalOfMantissa += list_of_m[i] / 2 ** (i + 1)
        i += 1
    mantissa = 1 + fractionalOfMantissa
    print("mantissa is: ", mantissa)
    floatNumber = sign * mantissa * 2 ** (exponent - 127)
    print("The float number is: ", floatNumber)
    print("------------------End of Function ---------------------")


# Example binary from the exercise file:
convert_binary("110000101011000000000000")

# Example binaries from the lecture file:
convert_binary("00000011111000000000000000000000")
convert_binary("11000000101100000000000000000000")

################# TASK 3 ################

import math

i = 1.0
while True:
    last_i = i
    i = i * 2
    if math.isinf(i):
        print("The overflow limit is: ", last_i)
        break


i = 1.0
while True:
    last_i = i
    i = i / 2
    if i == 0:
        print("The underflow limit is: ", last_i)
        break

################# TASK 4 ################3

import sys

print("Machine precision from system info: ", sys.float_info.epsilon)

eps = 1
a = 2
last_eps = eps
while a > 1:
    last_eps = eps
    eps = eps / 2
    a = eps + 1

print("Calculated machine precision: ", last_eps)

############# TASK 5 #############3
import math


def quadratic_equation(a, b, c):
    x1 = (-b + (math.sqrt(b ** 2 - (4 * a * c)))) / (2 * a)
    x2 = (-b - (math.sqrt(b ** 2 - (4 * a * c)))) / (2 * a)
    return {"x1": x1, "x2": x2}

a = 0.001
b = 1000
c = 0.001
print(quadratic_equation(a, b, c))


def quadratic_equation_multiply(a, b, c):
    plus_numerator = (-b + (math.sqrt(b ** 2 - (4 * a * c))))
    minus_numerator = (-b - (math.sqrt(b ** 2 - (4 * a * c))))
    denominator = 2 * a
    plus_numerator_multiply_plus_numerator = (plus_numerator * plus_numerator) / (denominator * plus_numerator)
    plus_numerator_multiply_minus_numerator = (minus_numerator * plus_numerator) / (denominator * minus_numerator)
    minus_numerator_multiply_plus_numerator = (plus_numerator * minus_numerator) / (denominator * plus_numerator)
    minus_numerator_multiply_minus_numerator = (minus_numerator * minus_numerator) / (denominator * minus_numerator)
    return {"p-p": plus_numerator_multiply_plus_numerator, "p-m": plus_numerator_multiply_minus_numerator,
            "m-p": minus_numerator_multiply_plus_numerator, "m-m": minus_numerator_multiply_minus_numerator}

print(quadratic_equation_multiply(a, b, c))

print("----------Part C ------------")
# part c:
def roots_of_quadratic(a, b, c):
    print("calculating roots for a=%d, b=%d, c=%d" % (a,b,c))
    discriminant = b ** 2 - (4 * a * c)
    if discriminant > 0:
        x1 = (-b + (math.sqrt(discriminant))) / (2 * a)
        x2 = (-b - (math.sqrt(discriminant))) / (2 * a)
        print("The calculated roots are real and different:")
        print("x1 = %f and x2 = %f" % (x1, x2))
    elif discriminant == 0:
        x1 = x2 = -b / (2 * a)
        print("The calculated roots are real and equal:")
        print("x1 = %f and x2 = %f" % (x1, x2))
    else:
        real = -b / (2 * a)
        imaginary = math.sqrt(-discriminant) / (2 * a)
        print("The calculated roots are complex:")
        print("x1 = ", real, " + ", imaginary, "i")
        print("x2 = ", real, " - ", imaginary, "i")
    print("-----------------End of function -------------------")


roots_of_quadratic(5, 3, 6)
roots_of_quadratic(3, 10, 5)
roots_of_quadratic(a, b, c)